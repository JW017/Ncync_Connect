@using static System.Net.WebRequestMethods
@using Microsoft.AspNetCore.Authorization

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider IdentityValidationProvider

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@using BlazorBootstrap
@using NCL.Shared.Entities
@using System.Text
@using System.IO

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
<link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="css/style-admin.css" />
<link rel="stylesheet" href="css/style-emppage.css" />

 <style>

    /* Style the tab */
    .tab2 {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        /* Style the buttons inside the tab */
        .tab2 button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }

            /* Change background color of buttons on hover */
            .tab2 button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab2 button.active {
                background-color: #ccc;
            }

    /* Style the tab content */
    .tabcontent2 {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }

</style> 

@if (pages == null)
{
<p><em>Loading...</em></p>
}
else
{
<div class="button-container">
    <div class="button-box">
        <h2> Page Gallery </h2>
        <Tooltip Class="d-inline-block" Title="Add New Page">
                <button class="btn btn-primary" id="addPageBtn" @onclick="OpenAddPageModal">Add</button>
        </Tooltip> 
        <Tooltip Class="d-inline-block" Title="Delete Multiple Pages">
            <button class="btn btn-primary" @onclick="@(()=>ShowMultipleDeletePageDialogAsync(@selectedPages))" id="deleteP">Delete</button>
        </Tooltip>
    </div>
</div>

<br />

<ConfirmDialog @ref="dialog" />

<Grid TItem="Page"
Class="table table-hover table-bordered table-striped"
DataProvider="PagesDataProvider"
AllowFiltering="true"
AllowPaging="true"
PageSize="5"
PageSizeSelectorVisible="true"
PageSizeSelectorItems="@(new int[] { 5,10,20 })"
AllowSorting="true"
AllowSelection="true"
SelectionMode="GridSelectionMode.Multiple"
SelectedItemsChanged="OnSelectedItemsChanged"
HeaderRowCssClass="bg-secondary text-white bg-opacity-55 border-bottom-0"
Responsive="true">

<GridColumn TItem="Page" HeaderText="Page Name" PropertyName="Page__Name" SortKeySelector="item => item.Page__Name">
    @context.Page__Name @context.Page__SecondName
</GridColumn>

<GridColumn TItem="Page" HeaderText="Page Sequence Number" PropertyName="Page__SequenceNo" SortKeySelector="item => item.Page__SequenceNo">
    @context.Page__SequenceNo
</GridColumn>

<GridColumn TItem="Page" HeaderText="Action" Sortable="false" Filterable="false">
<Tooltip Class="d-inline-block" Title="View Page">
    <button class="btn btn-primary" id="PageViewBtn" @onclick="()=>ViewPage(context.Page__ID)"><Icon Name="IconName.CardList" /></button> 
</Tooltip>
<Tooltip Class="d-inline-block" Title="Edit Image" >
    <button class="btn btn-primary" id="PageEditBtn" @onclick="()=>EditPage(context.Page__ID)"><Icon Name="IconName.PencilSquare" /></button> 
</Tooltip>
<Tooltip Class="d-inline-block" Title="Delete Page">
    <button class="btn btn-primary" @onclick="()=>ShowDeletePageDialogAsync(context.Page__ID)"><Icon Name="IconName.Trash" /></button>
</Tooltip>
</GridColumn>

</Grid>
                    

<div class="mt-3">
Selected Items Count: @selectedPages.Count
</div>
    @if (selectedPages.Count > 0)
    {
<div class="mt-2">
Selected Page:
<ul>

@foreach (var i in selectedPages)
{
<li>No. @i.Page__SequenceNo &emsp; @i.Page__Name</li>
}
</ul>
</div>
}

}

<!-- The Add Img Modal -->
<div id="pageModal" class="modal">

    <!-- Add Img content -->
    <div class="modal-content">
         <span class="close" @onclick="ResetClosePageModal">&times;</span> 

        <div class="tab2">
            <button id="AddPageTab" class="tablinks2" onclick="openTab2(event, 'AddPageContent')">Create New Page</button>
        </div>

        <div id="AddPageContent" class="tabcontent2" style="display:block;">

            <EditForm Model="page2">
                <DataAnnotationsValidator />
                <div style="margin: 20px 0px 20px 0px;display: flex">
                <div>
                    <label for="pageName">Page Name 1st Line:</label>
                        <InputText id="pageName" @bind-Value="page2.Page__Name" class="form-control" />
                    <ValidationMessage For="@(() => page2.Page__Name)" />
                </div>
                </div>

                <div style="margin: 20px 0px 20px 0px;display: flex">
                    <div>
                        <label for="pageName2">Page Name 2nd Line (Optional):</label>
                        <InputText id="pageName2" @bind-Value="page2.Page__SecondName" class="form-control" />
                    </div>
                </div>

                <div style="margin: 20px 0px 20px 0px;display: flex">
                    <div>
                        <label for="pageSeq">Page Sequence Number:</label>
                        <InputNumber id="pageSeq" @bind-Value="page2.Page__SequenceNo" class="form-control" />
                    </div>
                </div>

                <button type="button" class="btn btn-secondary" @onclick="ResetInputFile">Reset</button>
                <button type="submit" class="btn btn-primary" @onclick="PageSubmit">Upload Selected File</button>

            </EditForm>

            @if (!string.IsNullOrEmpty(ErrorMsg))
            {
                <div>Error: @ErrorMsg</div>
            }

        </div>
      
    </div>
</div>

<!-- The Edit Page Modal -->
<div id="pageEditModal" class="modal">

    <!-- Edit Page content -->
    <div class="modal-content">
        <span class="close" @onclick="ResetClosePageModal">&times;</span>

        <div class="tab2">
            <button class="tablinks2 active">Edit Page</button>
        </div>

        <div id="peContent" class="tabcontent2" style="display:block;">

            <EditForm Model="page2">
                <DataAnnotationsValidator />
                <div style="margin: 20px 0px 20px 0px;display: flex">
                    <div>
                        <label for="pageName">Page Name 1st Line:</label>
                        <InputText id="pageName" @bind-Value="page2.Page__Name" class="form-control" />
                        <ValidationMessage For="@(() => page2.Page__Name)" />
                    </div>
                </div>

                <div style="margin: 20px 0px 20px 0px;display: flex">
                    <div>
                        <label for="pageName2">Page Name 2nd Line (Optional):</label>
                        <InputText id="pageName2" @bind-Value="page2.Page__SecondName" class="form-control" />
                    </div>
                </div>

                <div style="margin: 20px 0px 20px 0px;display: flex">
                    <div>
                        <label for="pageSeq">Page Sequence Number:</label>
                        <InputNumber id="pageSeq" @bind-Value="page2.Page__SequenceNo" class="form-control" />
                        <ValidationMessage For="@(() => page2.Page__SequenceNo)" />
                    </div>
                </div>

                <button type="submit" class="btn btn-primary" @onclick="@(()=>SubmitPageEdit(page2.Page__ID))">Save</button>

            </EditForm>

            @if (!string.IsNullOrEmpty(ErrorMsg))
            {
                <div>Error: @ErrorMsg</div>
            }

        </div>
    </div>
</div>

<!-- The View Page Modal -->
<div id="pageViewModal" class="modal">

    <!-- View Page content -->
    <div class="modal-content">
        <span class="close" @onclick="ResetClosePageModal">&times;</span>
        <div class="tab2">
            <button class="tablinks2 active">Page Details</button>
        </div>

        <div class="tabcontent2" id="pvContent" style="text-align:center">

            <div style="margin: 0px 0px 5px 0px">
                <label for="PageName">Page Location:&emsp; Folder @page2.Page__FolderPathName</label>
            </div>

            <div style="margin: 0px 0px 5px 0px">
                <label for="PageName">Page Name 1st Line:&emsp;</label>
                @page2.Page__Name
            </div>

            @if (page2.Page__SecondName != "" || page2.Page__SecondName != null || page2.Page__SecondName != string.Empty)
            {
                <div style="margin: 0px 0px 5px 0px">
                    <label for="PageName">Page Name 2nd Line:&emsp;</label>
                    @page2.Page__SecondName
                </div>
            }

            <div style="margin: 0px 0px 5px 0px">
                <div>
                    <label for="pageSeq">Page Sequence No: &emsp;</label>
                    @page2.Page__SequenceNo
                </div>
            </div>

            @if (classes.Count(i => i.Class_Page__ID == page2.Page__ID) > 0 )
            {
                <div style="margin: 20px 0px 20px 0px; display:inline-flex;">
                    <div>
                        <label for="class">Class Created:&emsp;</label>
                        @foreach (var c in classes.Where(i => i.Class_Page__ID == page2.Page__ID))
                        {
                            <div class="classDisplay">
                                @c.Class__Name
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Page JavaScript -->
<script>

    // Get the modal
    var pmodal = document.getElementById("pageModal");
    var pemodal = document.getElementById("pageEditModal");
    var pvmodal = document.getElementById("pageViewModal");

    // When the user clicks on <span> (x), close the modal
    function ClosePageModal() {
        pmodal.style.display = "none";
        pemodal.style.display = "none";
        pvmodal.style.display = "none";
        document.getElementById("AddPageContent").style.display = "none";
    }

    // When the user clicks the button, open the modal
    function OpenPageAdd() {
        pmodal.style.display = "block";
        document.getElementById("AddPageContent").style.display = "block";
        document.getElementById("AddPageTab").className += " active";
    }

    function OpenPageEdit() {
        pemodal.style.display = "block";
        document.getElementById("peContent").style.display = "block";
    }

    function OpenPageView() {
        pvmodal.style.display = "block";
        document.getElementById("pvContent").style.display = "block";
    }

    // When the user clicks anywhere outside of the modal, close it

    function openTab2(evt2, tName2) {
        var k, tabcontent2, tablinks2;
        tabcontent2 = document.getElementsByClassName("tabcontent2");
        for (k = 0; k < tabcontent2.length; k++) {
            tabcontent2[k].style.display = "none";
        }
        tablinks2 = document.getElementsByClassName("tablinks2");
        for (k = 0; k < tablinks2.length; k++) {
            tablinks2[k].className = tablinks2[k].className.replace(" active", "");
        }
        document.getElementById(tName2).style.display = "block";
        evt2.currentTarget.className += " active";
    }

    function EnablePageDeleteBtn() {
        btn = document.getElementById("deleteP").disabled = false;
    }

    function DisablePageDeleteBtn() {
        btn = document.getElementById("deleteP").disabled = true;
    }
    </script>



@code {

    [Parameter] public int admin { get; set; }
    [Parameter] public int? ID { get; set; }

    public string? Username { get; set; }
    public Employee employees { get; set; } = new Employee();
    private bool UserAuthenticated => Authenticationstate.User.Identity?.IsAuthenticated ?? false;
    private string UserName => Authenticationstate.User.Identity?.Name ?? "Unknown";
    private AuthenticationState Authenticationstate { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Authenticationstate = await IdentityValidationProvider.GetAuthenticationStateAsync();
        var user = Authenticationstate.User;
        Username = UserName;

        var existingEmployee = await Http.GetFromJsonAsync<Employee>($"https://localhost:7219/api/Employees/{(string)Username}");
        if (existingEmployee != null && existingEmployee.Employee__Name == UserName)
        {
            employees = existingEmployee;
            Console.WriteLine("Admin in Page Gallery");
            admin = employees.Employee__ID;
        }
        else
        {
            // Navigate back to home page if user != admin
            Console.WriteLine("No Access to Admin Only Page - Image Gallery");
            Navigation.NavigateTo("/", true);
        }
    }

    public Page page2 { get; set; } = new Page();
    List<Page> pages = new List<Page>();
    private HashSet<Page> selectedPages = new();

    List<Class> classes = new List<Class>();
    List<Event> events = new List<Event>();

    private string ErrorMsg { get; set; } = String.Empty;

    private Guid inputFileId = Guid.NewGuid();

    private ConfirmDialog dialog = default!;

    private string CreatePath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
        await LoadClass();
        await LoadEvent();
        await JSRuntime.InvokeVoidAsync("DisablePageDeleteBtn");
    }

    async Task DeletePage(HashSet<Page> page2)
    {
        foreach (var p in page2)
        {          
            var targetFilePath = "wwwroot/Page/" + p.Page__Name;
            if (System.IO.File.Exists(targetFilePath))
            {
                System.IO.File.Delete(targetFilePath);
            }

            await Http.DeleteAsync("https://localhost:7219/api/Pages/" + p.Page__ID);
        }

        await LoadPage();       

        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Page", true);
    }

    async Task LoadPage()
    {
        var result = await Http.GetFromJsonAsync<List<Page>>("https://localhost:7219/api/Pages/GetPage");
        if (result != null)
        {
            pages = result;
        }
    } 

    async Task LoadClass()
    {
        var result = await Http.GetFromJsonAsync<List<Class>>("https://localhost:7219/api/Classes/GetClass");
        if (result != null)
        {
            classes = result;
        }
    }

    async Task LoadEvent()
    {
        var result = await Http.GetFromJsonAsync<List<Event>>("https://localhost:7219/api/Events/GetEvent");
        if (result != null)
        {
            events = result;
        }
    }

    private async Task<BlazorBootstrap.GridDataProviderResult<Page>> PagesDataProvider(BlazorBootstrap.GridDataProviderRequest<Page> request)
    {
        await LoadPage();

        return await Task.FromResult(request.ApplyTo(pages));
    }

    private Task OnSelectedItemsChanged(HashSet<Page> page2)
    {
        selectedPages = pages is not null && page2.Any() ? page2 : new();
        if (selectedPages.Count > 0)
        {
            JSRuntime.InvokeVoidAsync("EnablePageDeleteBtn");
        }
        else
        {
            JSRuntime.InvokeVoidAsync("DisablePageDeleteBtn");
        }
        return Task.CompletedTask;
    }

    private void ResetInputFile()
    {
        var targetDeleteImagePath = "wwwroot/Page/" + page2.Page__Name;
        if (System.IO.File.Exists(targetDeleteImagePath))
        {
            System.IO.File.Delete(targetDeleteImagePath);
        }

        // Change id so that blazor re-renders InputFile as new component
        inputFileId = Guid.NewGuid();
        page2 = new();
    }

    private async void ResetClosePageModal()
    {
        ResetInputFile();
        await JSRuntime.InvokeVoidAsync("ClosePageModal");
    }


    //Create a new Page
    async Task PageSubmit()
    {
        try
        {
            CreatePageFolder();

            // Post the page name to the server using PostAsJsonAsync
            var result = await Http.PostAsJsonAsync("https://localhost:7219/api/Pages/AddPages", page2);

            // Ensure the request was successful
            if (result.IsSuccessStatusCode)
            {
                Console.WriteLine("Added New Page");
                await LoadPage();
                Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Page", true);
            };
        }
        catch (HttpRequestException ex)
        {
            // Handle any exceptions or errors that occur during the request BY logging the exception or show an error message to the user
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    async Task OpenAddPageModal()
    {
        await JSRuntime.InvokeVoidAsync("OpenPageAdd");
    }

    async Task EditPage(int id)
    {

        var selectedPage = pages.First(c => c.Page__ID == id);

        //display the item's detailed information
        page2.Page__FolderPathName = selectedPage.Page__FolderPathName;
        page2.Page__ID = selectedPage.Page__ID;
        page2.Page__Name = selectedPage.Page__Name;
        page2.Page__SecondName = selectedPage.Page__SecondName;
        page2.Page__SequenceNo = selectedPage.Page__SequenceNo;

        await LoadPage();

        await JSRuntime.InvokeVoidAsync("OpenPageEdit");
    }

    async Task SubmitPageEdit(int id)
    {
        var result = await Http.PutAsJsonAsync($"https://localhost:7219/api/Pages/UpdatePageByID/{id}", page2);
        await LoadPage();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Page", true);
    }

    async Task ViewPage(int id)
    {
        var selectedPage = pages.First(c => c.Page__ID == id);

        //display the item's detailed information
        page2.Page__FolderPathName = selectedPage.Page__FolderPathName;
        page2.Page__Name = selectedPage.Page__Name;
        page2.Page__SecondName = selectedPage.Page__SecondName;
        page2.Page__SequenceNo = selectedPage.Page__SequenceNo;
        page2.Page__ID = selectedPage.Page__ID;

        await LoadPage();

        await JSRuntime.InvokeVoidAsync("OpenPageView");
    }

    async Task DeletePageByID(int id)
    {
        var selectedPage = pages.First(c => c.Page__ID == id);

        var targetDeletePagePath = "wwwroot/Page/" + selectedPage.Page__FolderPathName;
        if (System.IO.Directory.Exists(targetDeletePagePath))
        {
            System.IO.Directory.Delete(targetDeletePagePath, true);

            await Http.DeleteAsync("https://localhost:7219/api/Pages/" + selectedPage.Page__ID);

            foreach (var c in classes)
            {
                if (c.Class_Page__ID == selectedPage.Page__ID)
                {
                    await Http.DeleteAsync("https://localhost:7219/api/Classes/" + c.Class__ID);

                    foreach (var e in events)
                    {
                        if (e.Event_Class__ID == c.Class__ID)
                        {
                            await Http.DeleteAsync("https://localhost:7219/api/Classes/" + e.Event__ID);
                        }
                    }
                }
            }
        }
        else
        {
            Console.WriteLine($"Fail to delete {selectedPage.Page__FolderPathName} folder");
        }

        await LoadPage();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Page", true);
    }

    private async Task ShowDeletePageDialogAsync(int id)
    {
        var selectedPage = pages.First(c => c.Page__ID == id);

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Page",
            message1: $"Are you sure you want to delete this page - {selectedPage.Page__Name}?",
            message2: "The content in this page will be deleted permanantly.",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeletePageByID(selectedPage.Page__ID);
        }
    }

    private async Task ShowMultipleDeletePageDialogAsync(HashSet<Page> page2)
    {

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Multiple Pages",
            message1: $"Are you sure you want to delete these {selectedPages.Count} selected pages?",
            message2: "The content in these pages will be deleted permanantly.",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeletePage(selectedPages);
        }
    }

    private void CreatePageFolder()
    {
        page2.Page__FolderPathName = "Page_" + page2.Page__Name;

        string path = "wwwroot\\Page\\" + page2.Page__FolderPathName;

        // Combine the base path with the new folder path
        string fullPath = Path.Combine(Environment.CurrentDirectory, path);

        // Check if the folder doesn't exist and then create it
        if (!Directory.Exists(fullPath))
        {
            DirectoryInfo di = Directory.CreateDirectory(fullPath);
        }
        else
        {
            Console.WriteLine($"This path: {path} already exists.");
        }
    }
}

