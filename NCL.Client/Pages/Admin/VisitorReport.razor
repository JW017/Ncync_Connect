@using System.Text.RegularExpressions;
@using static System.Net.WebRequestMethods
@using Microsoft.AspNetCore.Authorization


@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider IdentityValidationProvider

@rendermode @(new InteractiveServerRenderMode(prerender:false))
@attribute [StreamRendering(true)]

@using BlazorBootstrap
@using NCL.Shared.Entities
@using System.Text

<style>
    /* Style the tab */
    .tab4 {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        /* Style the buttons inside the tab */
        .tab4 button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }

            /* Change background color of buttons on hover */
            .tab4 button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab4 button.active {
                background-color: #ccc;
            }

    /* Style the tab content */
    .tabcontent4 {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }


    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        text-align: left;
        padding: 8px;
    }

    .border-white{
        border: 1px solid white;
        border-top: none;
    }

    .border-grey {
        border: 1px solid #ccc;
        border-top: none;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

</style>


@if (guests == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <Accordion>
        <AccordionItem Title="Visitor Report Content" Active="true">
            <Content>

    <div class="button-container">
        <div class="button-box">
            <h2>Visitor Report </h2>
            <Tooltip Class="d-inline-block" Title="Export to Excel">
                <button class="btn btn-primary" @onclick="ExportToExcel">Export</button>
            </Tooltip>
            <Tooltip Class="d-inline-block" Title="Add New Visitor">
                <button class="btn btn-primary" @onclick="OpenAddVisitorModal">Add</button>
            </Tooltip>
            <Tooltip Class="d-inline-block" Title="Delete Visitor">
                <button class="btn btn-primary" @onclick="@(()=>ShowMultipleDeleteVisitorDialogAsync(@selectedGuests))" id="deleteG">Delete</button>
            </Tooltip>
        </div>
    </div>

    <br />
    <ConfirmDialog @ref="dialog" />

    <Grid TItem="Visitor"
          id="table"
          Class="table table-hover table-bordered table-striped"
          DataProvider="GuestsDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="5"
          PageSizeSelectorVisible="true"
          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
          AllowSorting="true"
          AllowSelection="true"
          SelectionMode="GridSelectionMode.Multiple"
          SelectedItemsChanged="OnSelectedItemsChanged"
          HeaderRowCssClass="bg-secondary text-white bg-opacity-55 border-bottom-0"
          Responsive="true">

        <GridColumn TItem="Visitor" HeaderText="Visitor Name" PropertyName="Visitor__Name" SortKeySelector="item => item.Visitor__Name">
            @context.Visitor__Name
        </GridColumn>
        <GridColumn TItem="Visitor" HeaderText="Contact Number" PropertyName="Visitor__Contact" SortKeySelector="item => item.Visitor__Contact">
            @context.Visitor__Contact
        </GridColumn>
        <GridColumn TItem="Visitor" HeaderText="Action" Sortable="false" Filterable="false">
            <Tooltip Class="d-inline-block" Title="View Visitor Details">
                <button class="btn btn-primary" id="VstViewBtn" @onclick="()=>ViewVisitor(context.Visitor__ID)"><Icon Name="IconName.CardList" /></button>
            </Tooltip>
            <Tooltip Class="d-inline-block" Title="Delete Visitor">
                <button class="btn btn-primary" @onclick="()=>ShowDeleteVisitorDialogAsync(context.Visitor__ID)"><Icon Name="IconName.Trash" /></button>
            </Tooltip>
        </GridColumn>
    </Grid>

    <br />

        <div class="mt-3">
        Selected Items Count: @selectedGuests.Count
    </div>

    @if (selectedGuests.Count > 0)
    {
        <div class="mt-2">
            Selected Employees:
            <ul>
                @foreach (var g in selectedGuests)
                {
                    <li>@g.Visitor__Name</li>
                }
            </ul>
        </div>
    }

            </Content>
        </AccordionItem>

        <AccordionItem Title="Visitor Page Content">
            <Content>
                <div class="button-container">
                    <div class="button-box">
                        <h2> Video Gallery </h2>
                        <Tooltip Class="d-inline-block" Title="Add New Video">
                            <button class="btn btn-primary" id="addVideoBtn" @onclick="OnShowModalClick">Add</button>
                        </Tooltip>
                        <Tooltip Class="d-inline-block" Title="Delete Multiple Videos">
                            <button class="btn btn-primary" @onclick="@(()=>ShowMultipleDeleteVideoDialogAsync(@selectedVideos))" id="deleteV">Delete</button>
                        </Tooltip>
                    </div>
                </div>

                <br />

                <Grid TItem="Video"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="VideosDataProvider"
                      AllowFiltering="true"
                      AllowPaging="true"
                      PageSize="5"
                      PageSizeSelectorVisible="true"
                      PageSizeSelectorItems="@(new int[] { 5,10,20 })"
                      AllowSorting="true"
                      AllowSelection="true"
                      SelectionMode="GridSelectionMode.Multiple"
                      SelectedItemsChanged="OnSelectedVideosChanged"
                      HeaderRowCssClass="bg-secondary text-white bg-opacity-55 border-bottom-0"
                      Responsive="true">

                    <GridColumn TItem="Video" HeaderText="Name" PropertyName="Video__Name" SortKeySelector="item => item.Video__Name">
                        @context.Video__Name
                    </GridColumn>

                    <GridColumn TItem="Video" HeaderText="Video Location" PropertyName="LocationLocation__ID" SortKeySelector="item => item.LocationLocation__ID">
                        @foreach (var loc in locations)
                        {
                            if (context.LocationLocation__ID == loc.Location__ID)
                            {
                                @loc.Location__Name
                            }
                        }
                    </GridColumn>

                    <GridColumn TItem="Video" HeaderText="Action" Sortable="false" Filterable="false">
                        <Tooltip Class="d-inline-block" Title="View Video">
                            <button class="btn btn-primary" id="VideoViewBtn" @onclick="()=>ViewVideo(context.Video__ID)"><Icon Name="IconName.CardList" /></button>
                        </Tooltip>
                        <Tooltip Class="d-inline-block" Title="Edit Video">
                            <button class="btn btn-primary" id="VideoEditBtn" @onclick="()=>EditVideo(context.Video__ID)"><Icon Name="IconName.PencilSquare" /></button>
                        </Tooltip>
                        <Tooltip Class="d-inline-block" Title="Delete Video">
                            <button class="btn btn-primary" @onclick="()=>ShowDeleteVideoDialogAsync(context.Video__ID)"><Icon Name="IconName.Trash" /></button>
                        </Tooltip>
                    </GridColumn>

                </Grid>


                <div class="mt-3">
                    Selected Items Count: @selectedVideos.Count
                </div>
                @if (selectedVideos.Count > 0)
                {
                    <div class="mt-2">
                        Selected Videos:
                        <ul>

                            @foreach (var i in selectedVideos)
                            {
                                <li>@i.Video__Name</li>
                            }
                        </ul>
                    </div>
                }
            </Content>
        </AccordionItem>
    </Accordion>

}
                
<!-- The Add Visitor Modal -->
<div id="vstModal" class="modal">
    
    <!-- Add Visitor content -->
    <div class="modal-content">
        <span class="close" @onclick="ResetCloseVisitorModal">&times;</span>

        <div class="tab4">
            <button id="AddVisitorTab" class="tablinks4" onclick="openTab4(event, 'AddVisitorContent')">Add New Visitor</button>
            <button id="AddLocationTab" class="tablinks4" onclick="openTab4(event, 'AddLocationContent')">Create New Location</button>
        </div>

        <div id="AddVisitorContent" class="tabcontent4" >
            <EditForm Model="NCLGuest" >
                <DataAnnotationsValidator />
                    <div style="margin: 20px 0px 20px 0px; display: flex">
                    <div>
                        <label for="VisitorName">Visitor Name:</label>
                        <InputText id="VisitorName" @bind-Value="NCLGuest.Visitor__Name" class="form-control" />
                        <ValidationMessage For="@(() => NCLGuest.Visitor__Name)" />
                    </div>
                    </div>

                    <div style="margin: 20px 0px 20px 0px; display: flex">
                    <div>
                        <label for="VisitorContact">Visitor Contact:</label>
                        <InputText id="VisitorContact" @bind-Value="validcontact" class="form-control" />
                    </div>
                    </div>

                    <div style="margin: 20px 0px 50px 0px; display: flex">
                    <div>
                        <label for="VisitorActivityLocation">Visiting Location:</label>
                        <InputSelect id="VisitorAcitvityLocation" @bind-Value="visitorActivity.LocationLocation__ID" class="form-control">
                            <option value="">Please select a location</option>
                            @foreach (var location in locations)
                            {
                                <option value="@location.Location__ID">@location.Location__Name</option>
                            }
                        </InputSelect>
                    </div>
                    </div>

                <br />
                <button type="button" class="btn btn-secondary" @onclick="ResetInputFile">Reset</button>
                <button type="submit" class="btn btn-primary" @onclick="SubmitNewGuest">Create</button>

            </EditForm>
        </div>

        <div id="AddLocationContent" class="tabcontent4">
            <EditForm Model="locs">
                <DataAnnotationsValidator />

                <div style="margin: 20px 0px 20px 0px; display:flex">
                    <div>
                        <label for="Location__Name">Existing Location:</label>
                        <br />
                        @foreach (var loc in locations)
                        {
                            <Tooltip Class="d-inline-block" Title="Click to Delete">
                                <button type="button" class="btn delete" @onclick="()=>ShowDeleteLocationDialogAsync(loc.Location__ID)">@loc.Location__Name <Icon Name="IconName.Trash" /></button>
                            </Tooltip>
                        }
                    </div>
                </div>

                <div style="margin: 20px 0px 50px 0px; display:flex">
                <div>
                    <label for="locsName">Location Name:</label>
                    <InputText id="locsName" @bind-Value="locs.Location__Name" class="form-control" />
                    <ValidationMessage For="@(() => locs.Location__Name)" />
                </div>
                </div>
                <br/>
                <button type="button" class="btn btn-secondary" @onclick="ResetInputFile">Reset</button>
                <button type="submit" class="btn btn-primary" @onclick="SubmitNewLocation">Create</button>

            </EditForm>
        </div>
    </div>
</div>

<!-- The View VisitorActivity Modal -->
<div id="vstViewModal" class="modal">

    <!-- View VisitorActivity content -->
    <div class="modal-content">
        <span class="close" @onclick="ResetCloseVisitorModal">&times;</span>

        <div class="tab4">
            <button id="ViewVisitorActivityTab" class="tablinks4" onclick="openTab4(event, 'ViewVisitorActivityContent')">View Visitor Details</button>
        </div>

        <div id="ViewVisitorActivityContent" class="tabcontent4">

                <div style="margin: 20px 0px 20px 0px; display: flex">
                    <div>
                    <label for="VisitorName">Visitor Name:&emsp;</label>
                    @NCLGuest.Visitor__Name
                    </div>
                </div>

                <div style="margin: 20px 0px 20px 0px; display: flex">
                    <div>
                    <label for="VisitorContact">Visitor Contact:&emsp;</label>
                        @NCLGuest.Visitor__Contact
                    </div>
                </div>

            <div class="button-container">
                <div class="button-box">
                    <h2>Visitor Activity </h2>
                </div>
            </div>
            <ConfirmDialog @ref="dialog2" />
            
            <div style="overflow-x: auto;">
                <table >
                    <tr class="border-white" style="background-color: darkgrey; color: white;">
                        <th class="border">Date</th>
                        <th class="border">Visiting Location</th>
                        <th class="border">Action</th>
                    </tr>

                        @if (visitorActivityList.Count(i => i.VisitorVisitor__ID == NCLGuest.Visitor__ID) > 0)
                        {   
                            @foreach (var va in visitorActivityList.Where(i=>i.VisitorVisitor__ID == NCLGuest.Visitor__ID))
                            {
                            <tr class="border-grey">
                                <td class="border-grey">@va.VisitorActivity__DateTime</td>

                                @foreach (var loc in locations)
                                {
                                    if (loc.Location__ID == va.LocationLocation__ID)
                                    {
                                        <td class="border-grey">@loc.Location__Name</td>
                                    }
                                }

                                <td class="border-grey">
                                    <Tooltip Class="d-inline-block" Title="Delete Visitor">
                                        <button class="btn btn-primary" @onclick="()=>ShowDeleteVisitorActivityDialogAsync(va.VisitorActivity__ID)"><Icon Name="IconName.Trash" /></button>
                                    </Tooltip>
                                </td>
                            </tr>
                            }
                        }
                        else
                        {
                            <tr class="border-grey">
                                <td></td>
                                <td style="text-align:center;"><br /><Icon Name="IconName.BagX" Size="IconSize.x6" /> Empty Record</td>
                                <td></td>
                            </tr>
                        }
                 
                </table>
            </div>

        </div>
    </div>
</div>

<!-- The Add Video Modal -->
<Modal @ref="modalAdd" title="Add New Video" Size="ModalSize.Large" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <EditForm Model="video">
            <DataAnnotationsValidator />
            <div style="margin: 20px 0px 20px 0px;display: flex">
                <div>
                    <label for="vidName">Video Name:</label>
                    <InputText id="vidName" @bind-Value="video.Video__Name" class="form-control" />
                    <ValidationMessage For="@(() => video.Video__Name)" />
                </div>
            </div>

            <div style="margin: 20px 0px 20px 0px;display: flex">
                <div>
                    <label for="videoloc">Video Location:</label>
                    <InputSelect id="videoloc" @bind-Value="video.LocationLocation__ID" class="form-control">
                        <option value="0">Please select a location</option>
                        @foreach (var loc in locations)
                        {
                            <option value="@loc.Location__ID">@loc.Location__Name</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div style="margin: 20px 0px 50px 0px; display: flex">
                <div>Select your file:</div>
                <InputFile id="VideoPath" @key=@(inputFileId) OnChange="VideoUpload" accept=".mp4">
                </InputFile>
            </div>

            @if (VideoFileName != string.Empty)
            {
                <div style="margin: 20px 0px 50px 0px; display: flex">
                    <video controls width="420" height="276">
                        <source src="/Video/@VideoFileName">
                    </video>
                </div>
            }

        </EditForm>
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <div>Error: @ErrorMsg</div>
        }
    </BodyTemplate>

    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" id="resetEventFile" @onclick="OnHideModalClick">Cancel</Button>
        <Button @ref="addButton" Color="ButtonColor.Primary" @onclick="VideoSubmit">Add</Button>
    </FooterTemplate>
</Modal>

<!-- The Edit Video Modal -->
<Modal @ref="modalEdit" title="Edit Video" Size="ModalSize.Large" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <EditForm Model="video">
            <DataAnnotationsValidator />
            <div>
                <div style="margin-bottom: 20px; ">
                    <label for="Video Name">Video Name:</label>
                    <InputText id="Video Name" @bind-Value="video.Video__Name" class="form-control" />
                    <ValidationMessage For="@(() => video.Video__Name)" />
                </div>
            </div>

            <div>
                <div style="margin-bottom: 20px; ">
                    <label for="VideoLocation">Video Location:</label>
                    <InputSelect id="VideoLocation" @bind-Value="video.LocationLocation__ID" class="form-control">
                        <option value="0">Please select a location</option>
                        @foreach (var loc in locations)
                        {
                            <option value="@loc.Location__ID">@loc.Location__Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            @if (video != null)
            {
                    <div style="margin: 20px 0px 50px 0px;">
                        <video controls width="500" height="300">
                            <source src="/Video/@video.Video__Path">
                        </video>
                    </div>

            }

        </EditForm>
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <div>Error: @ErrorMsg</div>
        }
    </BodyTemplate>

    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalEditClick">Cancel</Button>
        <Button @ref="deleteButton" Color="ButtonColor.Danger" @onclick="@(()=>ShowDeleteVideoDialogAsync(video.Video__ID))">Delete File</Button>
        <Button @ref="addButton" Color="ButtonColor.Primary" @onclick="@(()=>SubmitVideoEdit(video.Video__ID))">Save</Button>
    </FooterTemplate>
</Modal>

<!-- The View Video Modal -->
<Modal @ref="modalView" title="View Video Details" Size="ModalSize.Large" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
            @if (video.Video__Path == previousPath)
            {
                <div class="Video-tabcontent" style="text-align:center">
                    <div style="margin: 20px 0px 50px 0px; display: flex">
                        <video controls width="420" height="276">
                            <source src="/Video/@video.Video__Path">
                        </video>
                    </div>
                </div>
            }

            <div style="margin: 0px 0px 5px 0px">
                <label for="VideoTitle">Video Name:&emsp;</label>
                @video.Video__Name
            </div>

            <div style="margin: 0px 0px 20px 0px">
                <div>
                    <label for="videoType">Video Location:&emsp;</label>
                    @foreach (var loc in locations)
                    {
                        if (video.LocationLocation__ID == loc.Location__ID)
                        {
                            @loc.Location__Name
                        }
                    }
                </div>
            </div>

    </BodyTemplate>

    <FooterTemplate>
    </FooterTemplate>
</Modal>

<script>
    // Get the modal
    var vstmodal = document.getElementById("vstModal");
    var vstviewmodal = document.getElementById("vstViewModal");

    // When the user clicks the button, open the modal
    function OpenVisitorAdd() {
        vstmodal.style.display = "block";
        document.getElementById("AddVisitorContent").style.display = "block";
        document.getElementById("AddVisitorTab").className += " active";
    }

    function OpenVisitorView() {
        vstviewmodal.style.display = "block";
        document.getElementById("ViewVisitorActivityContent").style.display = "block";
        document.getElementById("ViewVisitorActivityTab").className += " active";
    }

    // When the user clicks on <span> (x), close the modal
    function CloseVisitorModal() {
        vstmodal.style.display = "none";
        vstviewmodal.style.display = "none";
        document.getElementById("AddVisitorContent").style.display = "none";
        document.getElementById("AddLocationContent").style.display = "none";
        document.getElementById("ViewVisitorActivityContent").style.display = "none";
    }

    function openTab4(evt4, tName4) {
        var e, tabcontent4, tablinks4;
        tabcontent4 = document.getElementsByClassName("tabcontent4");
        for (e = 0; e < tabcontent4.length; e++) {
            tabcontent4[e].style.display = "none";
        }
        tablinks4 = document.getElementsByClassName("tablinks4");
        for (e = 0; e < tablinks4.length; e++) {
            tablinks4[e].className = tablinks4[e].className.replace(" active", "");
        }
        document.getElementById(tName4).style.display = "block";
        evt4.currentTarget.className += " active";
    }

    function EnableVisitorDeleteBtn() {
        btn = document.getElementById("deleteG").disabled = false;
    }

    function DisableVisitorDeleteBtn() {
        btn = document.getElementById("deleteG").disabled = true;
    }

    function EnableVisitorActivityDeleteBtn() {
        btn = document.getElementById("deleteA").disabled = false;
    }

    function DisableVisitorActivityDeleteBtn() {
        btn = document.getElementById("deleteA").disabled = true;
    }

    // Get the modal
    var vmodal = document.getElementById("VideoModal");
    var vemodal = document.getElementById("VideoEditModal");
    var vvmodal = document.getElementById("VideoViewModal");

    // When the user clicks on <span> (x), close the modal
    function CloseVideoModal() {
        vmodal.style.display = "none";
        vemodal.style.display = "none";
        vvmodal.style.display = "none";
        document.getElementById("AddVideoContent").style.display = "none";
    }

    // When the user clicks the button, open the modal
    function OpenVideoAdd() {
        vmodal.style.display = "block";
        document.getElementById("AddVideoContent").style.display = "block";
        document.getElementById("AddVideoTab").className += " active";
    }

    function OpenVideoEdit() {
        vemodal.style.display = "block";
        document.getElementById("veContent").style.display = "block";
    }

    function OpenVideoView() {
        vvmodal.style.display = "block";
        document.getElementById("vvContent").style.display = "block";
    }

    // When the user clicks anywhere outside of the modal, close it

    function openTab5(evt5, tName5) {
        var k, tabcontent5, tablinks5;
        tabcontent5 = document.getElementsByClassName("tabcontent5");
        for (k = 0; k < tabcontent2.length; k++) {
            tabcontent2[k].style.display = "none";
        }
        tablinks5 = document.getElementsByClassName("tablinks5");
        for (k = 0; k < tablinks5.length; k++) {
            tablinks5[k].className = tablinks5[k].className.replace(" active", "");
        }
        document.getElementById(tName5).style.display = "block";
        evt5.currentTarget.className += " active";
    }

    function EnableVideoDeleteBtn() {
        btn = document.getElementById("deleteV").disabled = false;
    }

    function DisableVideoDeleteBtn() {
        btn = document.getElementById("deleteV").disabled = true;
    }
</script>

@code {
    [Parameter] public int admin { get; set; }
    [Parameter] public int? ID { get; set; }

    List<Visitor> guests = new List<Visitor>();
    public Visitor NCLGuest { get; set; } = new Visitor();
    private HashSet<Visitor> selectedGuests = new();

    List<VisitorActivity> visitorActivityList = new List<VisitorActivity>();
    public VisitorActivity visitorActivity { get; set; } = new VisitorActivity();
    private HashSet<VisitorActivity> selectedVisitorActivity = new();

    List<Location> locations = new List<Location>();
    public Location locs { get; set; } = new Location();

    private ConfirmDialog dialog = default!;
    private ConfirmDialog dialog2 = default!;
    private DateOnly date2, min2, max2;
    private DateTime date = DateTime.Now;
    private DateTime min = DateTime.Now.AddMonths(-1);
    private DateTime max = DateTime.Now.AddYears(1);

    public string? Username { get; set; }
    public Employee employees2 { get; set; } = new Employee();
    private bool UserAuthenticated => Authenticationstate.User.Identity?.IsAuthenticated ?? false;
    private string UserName => Authenticationstate.User.Identity?.Name ?? "Unknown";
    private AuthenticationState Authenticationstate { get; set; }

    private string validcontact = string.Empty;

    // Validate user employee: create new employee data entry if the user is employee but not in database
    protected override async Task OnParametersSetAsync()
    {
        Authenticationstate = await IdentityValidationProvider.GetAuthenticationStateAsync();
        var user = Authenticationstate.User;
        Username = UserName;

        var existingEmployee = await Http.GetFromJsonAsync<Employee>($"https://localhost:7219/api/Employees/{(string)Username}");
        if (existingEmployee != null && existingEmployee.Employee__Name == UserName)
        {
            employees2 = existingEmployee;
            Console.WriteLine("Admin in Visitor Report");
            admin = employees2.Employee__ID;
        }
        else
        {
            // Navigate back to home page if user != admin
            Console.WriteLine("No Access to Admin Only Page - Guest Report");
            Navigation.NavigateTo("/", true);
        }

        if (ID != null)
        {
            var result = await Http.GetFromJsonAsync<Visitor>($"https://localhost:7219/api/Visitors/{(int)ID}");
            if (result != null)
            {
                NCLGuest = result;
            }

            var result2 = await Http.GetFromJsonAsync<VisitorActivity>($"https://localhost:7219/api/Visitors/GetVisitorActivityByID/{(int)ID}");
            if (result2 != null)
            {
                visitorActivity = result2;
            }
        }
    }

    //Render Guest Report on initialize
    protected override async Task OnInitializedAsync()
    {
        date2 = DateOnly.FromDateTime(date);
        min2 = DateOnly.FromDateTime(min);
        max2 = DateOnly.FromDateTime(max);

        await LoadVisitorReport();
        await LoadGuestLocation();
        await LoadVisitorActivity();
        await LoadVideo();
        await JSRuntime.InvokeVoidAsync("DisableVisitorDeleteBtn");
        await JSRuntime.InvokeVoidAsync("DisableVideoDeleteBtn");
    }

    //Delete Guest data from database
    async Task DeleteVisitor(HashSet<Visitor> guest)
    {
        foreach (var g in guest)
        {
            await Http.DeleteAsync("https://localhost:7219/api/Visitors/" + g.Visitor__ID);
        }
        await LoadVisitorReport();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    //Delete VisitorActivity data from database
    async Task DeleteVisitorActivity(int id)
    {
        await Http.DeleteAsync("https://localhost:7219/api/Visitors/DeleteVisitorActivityByID/" + id);
        await LoadVisitorActivity();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    //Retrieve Visitor data from database
    async Task LoadVisitorReport()
    {
        var result = await Http.GetFromJsonAsync<List<Visitor>>("https://localhost:7219/api/Visitors");
        if (result != null)
        {
            guests = result;
        }
    }

    async Task LoadVisitorActivity()
    {
        var result = await Http.GetFromJsonAsync<List<VisitorActivity>>("https://localhost:7219/api/Visitors/GetVisitorActivities");
        if (result != null)
        {
            visitorActivityList = result;
        }
    }

    //Retrieve location data from database
    async Task LoadGuestLocation()
    {
        var result2 = await Http.GetFromJsonAsync<List<Location>>("https://localhost:7219/api/Locations");
        if (result2!= null)
        {
            locations = result2;
        }
    }

    // Display Visitor Report in grid view
    private async Task<BlazorBootstrap.GridDataProviderResult<Visitor>> GuestsDataProvider(BlazorBootstrap.GridDataProviderRequest<Visitor> request)
    {
        await LoadVisitorReport();

        return await Task.FromResult(request.ApplyTo(guests));
    }

    // Return selected guest result
    private Task OnSelectedItemsChanged(HashSet<Visitor> guest)
    {
        selectedGuests = guest is not null && guest.Any() ? guest : new();

        if (selectedGuests.Count > 0)
        {
            JSRuntime.InvokeVoidAsync("EnableVisitorDeleteBtn");
        }
        else
        {
            JSRuntime.InvokeVoidAsync("DisableVisitorDeleteBtn");
        }
        return Task.CompletedTask;
    }

    // Return selected visitor activity result
    private Task OnSelectedActivityChanged(HashSet<VisitorActivity> vstActivity)
    {
        selectedVisitorActivity = vstActivity is not null && vstActivity.Any() ? vstActivity : new();

        if (selectedVisitorActivity.Count > 0)
        {
            JSRuntime.InvokeVoidAsync("EnableVisitorActivityDeleteBtn");
        }
        else
        {
            JSRuntime.InvokeVoidAsync("DisableVisitorActivityDeleteBtn");
        }
        return Task.CompletedTask;
    }

    // Export Visitor/Guest Report to excel file
    private void ExportToExcel()
    {        
        var csvContent = new StringWriter();
        csvContent.WriteLine("NCL Visitor Report");

        csvContent.WriteLine("No.,Visitor Name,Contact Number,Location Visiting,Date & Time");
        int index = 1;
        foreach (var guest in guests)
        {
            foreach (var v in visitorActivityList)
            {
                var locationName = locations.FirstOrDefault(loc => loc.Location__ID == v.LocationLocation__ID)?.Location__Name;
                var dateTime = v.VisitorActivity__DateTime;

                csvContent.WriteLine($"{index++},{guest.Visitor__Name},{guest.Visitor__Contact},{locationName},{dateTime}");
            }
        }

        var fileName = "VisitorReport.csv";
        var csvString = csvContent.ToString();

        // Convert the CSV string to a byte array
        var byteArray = Encoding.UTF8.GetBytes(csvString);

        // Invoke JavaScript interop to initiate the file download
        JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(byteArray));
    }

    //Clear input data
    private void ResetInputFile()
    {
        NCLGuest = new();
        locs = new();
    }

    private async void ResetCloseVisitorModal()
    {
        NCLGuest = new();
        locs = new();
        await JSRuntime.InvokeVoidAsync("CloseVisitorModal");
    }

    //Create a new Location
    async Task SubmitNewLocation()
    {
        try
        {
            // Post the videotype name to the server using PostAsJsonAsync
            var result = await Http.PostAsJsonAsync("https://localhost:7219/api/Locations/AddLocations", locs);

            // Ensure the request was successful
            if (result.IsSuccessStatusCode)
            {
                Console.WriteLine("Added New Location");
                await LoadGuestLocation();
                Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
            };
        }
        catch (HttpRequestException ex)
        {
            // Handle any exceptions or errors that occur during the request BY logging the exception or show an error message to the user
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public static string RemoveSpecialCharacters(string input)
    {
        string pattern = @"[^a-zA-Z0-9]";

        string cleanedPhrase = Regex.Replace(input, pattern, string.Empty);

        return cleanedPhrase;
    }

    //Create a new Visitor
    async Task SubmitNewGuest()
    {
        NCLGuest.Visitor__Contact = RemoveSpecialCharacters(validcontact);
        var selectedItem = guests.Find(i => i.Visitor__Contact == NCLGuest.Visitor__Contact);

        if (selectedItem == null)
        {           
            var result = await Http.PostAsJsonAsync("https://localhost:7219/api/Visitors/AddVisitors", NCLGuest);
            NCLGuest = await result.Content.ReadFromJsonAsync<Visitor>();

            visitorActivity.VisitorActivity__DateTime = DateTime.Now;
            visitorActivity.VisitorVisitor__ID = NCLGuest.Visitor__ID;
            var result2 = await Http.PostAsJsonAsync("https://localhost:7219/api/Visitors/AddVisitorActivities", visitorActivity);
            visitorActivity = await result2.Content.ReadFromJsonAsync<VisitorActivity>();
        }
        else
        {
            visitorActivity.VisitorActivity__DateTime = DateTime.Now;
            visitorActivity.VisitorVisitor__ID = selectedItem.Visitor__ID;
            var result2 = await Http.PostAsJsonAsync("https://localhost:7219/api/Visitors/AddVisitorActivities", visitorActivity);
            visitorActivity = await result2.Content.ReadFromJsonAsync<VisitorActivity>();
        }

        await JSRuntime.InvokeVoidAsync("CloseVisitorModal");
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    private async Task ShowMultipleDeleteVisitorDialogAsync(HashSet<Visitor> guest)
    {

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Visitor",
            message1: $"Are you sure you want to delete these {selectedGuests.Count} selected visitors?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteVisitor(selectedGuests);
        }
    }

    private async Task ShowDeleteVisitorDialogAsync(int id)
    {
        var selectedVst = guests.First(c => c.Visitor__ID == id);

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Visitor",
            message1: "Are you sure you want to delete this visitor?",
            message2: $"Selected visitor: {selectedVst.Visitor__Name}",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteVisitor(selectedVst.Visitor__ID);
        }
    }

    private async Task ShowDeleteLocationDialogAsync(int id)
    {
        var selectedLocation = locations.First(c => c.Location__ID == id);

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Location",
            message1: "Are you sure you want to delete this location?",
            message2: $"Selected location: {selectedLocation.Location__Name}",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteLocation(selectedLocation.Location__ID);
        }
    }

    async Task DeleteVisitor(int id)
    {
        var selectedVst = guests.First(c => c.Visitor__ID == id);
        await Http.DeleteAsync("https://localhost:7219/api/Visitors/" + selectedVst.Visitor__ID);
        await LoadVisitorReport();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    async Task DeleteLocation(int id)
    {
        var selectedLocation = locations.First(c => c.Location__ID == id);
        await Http.DeleteAsync("https://localhost:7219/api/Locations/DeleteLocationsByID/" + selectedLocation.Location__ID);
        await LoadGuestLocation();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Location", true);
    }

    private async Task OpenAddVisitorModal()
    {
        await JSRuntime.InvokeVoidAsync("OpenVisitorAdd");
    }

    async Task ViewVisitor(int id)
    {
        var selectedVst = guests.First(c => c.Visitor__ID == id);
        visitorActivityList = visitorActivityList.FindAll(c => c.VisitorVisitor__ID == id);

        //display the item's detailed information
        NCLGuest.Visitor__Name = selectedVst.Visitor__Name;
        NCLGuest.Visitor__Contact = selectedVst.Visitor__Contact;
        NCLGuest.Visitor__ID = selectedVst.Visitor__ID;

        foreach (var v in visitorActivityList)
        {
            visitorActivity.VisitorActivity__DateTime = v.VisitorActivity__DateTime;
            visitorActivity.LocationLocation__ID = v.LocationLocation__ID;
            visitorActivity.VisitorVisitor__ID = NCLGuest.Visitor__ID;
        }

        await LoadVisitorActivity();
        await LoadGuestLocation();
        await LoadVisitorReport();

        await JSRuntime.InvokeVoidAsync("OpenVisitorView");
    }

    private async Task ShowDeleteVisitorActivityDialogAsync(int id)
    {
        var selectedActivity = visitorActivityList.First(c => c.VisitorActivity__ID == id);

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog2.ShowAsync(
            title: "Delete Visitor Activity",
            message1: "Are you sure you want to delete this visitor activity?",
            message2: $"Visitor activity on {selectedActivity.VisitorActivity__DateTime}",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteVisitorActivity(selectedActivity.VisitorActivity__ID);
        }
    }

    List<Video> videos = new List<Video>();
    public Video video { get; set; } = new Video();
    private HashSet<Video> selectedVideos = new();

    private string ErrorMsg { get; set; } = String.Empty;
    const long maxFileSize = 5000 * 1024 * 100; // 500MB
    private string VideoFileName { get; set; } = String.Empty;
    private string VideoFilePath { get; set; } = String.Empty;

    private Guid inputFileId = Guid.NewGuid();
    IBrowserFile browserVideos;

    private Modal modalView, modalAdd, modalEdit;
    private Button saveButton, addButton, deleteButton;

    private async Task OnShowModalClick()
    {
        await modalAdd.ShowAsync();
        await JSRuntime.InvokeVoidAsync("DisableResetButton");
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    private async Task OnHideModalClick()
    {
        if (video.Video__Path != null)
        {
            ResetInputVideo();
        }
        await modalAdd.HideAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    private async Task OnHideModalEditClick()
    {
        await modalEdit.HideAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }


    //used to store the Edit item original video path.
    private string previousPath = string.Empty;

    private string CreatePath = string.Empty;

    async Task DeleteVideo(HashSet<Video> video)
    {
        foreach (var i in video)
        {
            await DeleteVideoByID(i.Video__ID);
        }

        await LoadVideo();

        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    async Task LoadVideo()
    {
        var result = await Http.GetFromJsonAsync<List<Video>>("https://localhost:7219/api/Videos");
        if (result != null)
        {
            videos = result;
        }
    }

    private async Task<BlazorBootstrap.GridDataProviderResult<Video>> VideosDataProvider(BlazorBootstrap.GridDataProviderRequest<Video> request)
    {
        await LoadVideo();
        await LoadGuestLocation();
        return await Task.FromResult(request.ApplyTo(videos));
    }

    private Task OnSelectedVideosChanged(HashSet<Video> videoo)
    {
        selectedVideos = videos is not null && videoo.Any() ? videoo : new();
        if (selectedVideos.Count > 0)
        {
            JSRuntime.InvokeVoidAsync("EnableVideoDeleteBtn");
        }
        else
        {
            JSRuntime.InvokeVoidAsync("DisableVideoDeleteBtn");
        }
        return Task.CompletedTask;
    }

    private void ResetInputVideo()
    {
        var targetDeleteVideoPath = "wwwroot/Video/" + VideoFileName;
        if (System.IO.File.Exists(targetDeleteVideoPath))
        {
            System.IO.File.Delete(targetDeleteVideoPath);
        }

        // Change id so that blazor re-renders InputFile as new component
        inputFileId = Guid.NewGuid();
        video = new();
        VideoFileName = string.Empty;
    }

    private async void ResetCloseVideoModal()
    {
        ResetInputVideo();
        await JSRuntime.InvokeVoidAsync("CloseVideoModal");
    }

    public async Task VideoUpload(InputFileChangeEventArgs e)
    {
        browserVideos = e.File;
        if (browserVideos != null)
        {
            try
            {
                string path = "wwwroot\\Video\\" + CreatePath;

                // Combine the base path with the new folder path
                string fullPath = Path.Combine(Environment.CurrentDirectory, path);

                // Check if the folder doesn't exist and then create it
                if (!Directory.Exists(fullPath))
                {
                    DirectoryInfo di = Directory.CreateDirectory(fullPath);
                }
                else
                {
                    Console.WriteLine("That path exists already.");
                }

                var fileStream = browserVideos.OpenReadStream(maxFileSize);
                var randomFile = Path.Combine("wwwroot", "Video", CreatePath, browserVideos.Name);
                var extension = Path.GetExtension(browserVideos.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);
                VideoFilePath = video.Video__Path + extension;

                var targetStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(targetStream);
                targetStream.Close();

                VideoFileName = browserVideos.Name;

            }
            catch (Exception exception)
            {
                ErrorMsg = exception.Message;
            }
        }
    }

    async Task VideoSubmit()
    {
        video.Video__Path = VideoFileName;

        var result = await Http.PostAsJsonAsync("https://localhost:7219/api/Videos", video);
        await InvokeAsync(StateHasChanged);
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }


    async Task EditVideo(int id)
    {

        var selectedVideo = videos.First(c => c.Video__ID == id);

        //display the item's detailed information
        video.Video__ID = selectedVideo.Video__ID;
        video.Video__Name = selectedVideo.Video__Name;
        video.Video__Path = selectedVideo.Video__Path;
        previousPath = selectedVideo.Video__Path;
        video.LocationLocation__ID = selectedVideo.LocationLocation__ID;

        await LoadVideo();

        await modalEdit.ShowAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    async Task SubmitVideoEdit(int id)
    {
        video.Video__Path = previousPath;

        var result = await Http.PutAsJsonAsync($"https://localhost:7219/api/Videos/UpdateVideoByID/{id}", video);

        await LoadVideo();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    async Task ViewVideo(int id)
    {

        var selectedVideo = videos.First(c => c.Video__ID == id);

        //display the item's detailed information
        video.Video__ID = selectedVideo.Video__ID;
        video.Video__Name = selectedVideo.Video__Name;
        video.Video__Path = selectedVideo.Video__Path;
        previousPath = selectedVideo.Video__Path;
        video.LocationLocation__ID = selectedVideo.LocationLocation__ID;

        await LoadVideo();
        await modalView.ShowAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    async Task DeleteVideoByID(int id)
    {
        var selectedVideo = videos.First(c => c.Video__ID == id);

        var targetDeleteVideoPath = "wwwroot/Video/" + selectedVideo.Video__Path;
        if (System.IO.File.Exists(targetDeleteVideoPath))
        {
            System.IO.File.Delete(targetDeleteVideoPath);
        }
        else
        {
            Console.WriteLine("Fail to delete Video file");
        }
        await Http.DeleteAsync("https://localhost:7219/api/Videos/DeleteVideoByID/" + selectedVideo.Video__ID);
        await LoadVideo();
        Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Visitor", true);
    }

    private async Task ShowDeleteVideoDialogAsync(int id)
    {
        var selectedVideo = videos.First(c => c.Video__ID == id);

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Video",
            message1: "Are you sure you want to delete this video?",
            message2: $"Selected video: {selectedVideo.Video__Name}",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteVideoByID(selectedVideo.Video__ID);
        }
    }

    private async Task ShowMultipleDeleteVideoDialogAsync(HashSet<Video> vid)
    {

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Delete Multiple Videos",
            message1: $"Are you sure you want to delete these {vid.Count} selected videos?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteVideo(vid);
        }
    }


    private void CreateFolder()
    {
        string path = "wwwroot\\Video\\" + CreatePath;

        // Combine the base path with the new folder path
        string fullPath = Path.Combine(Environment.CurrentDirectory, path);

        // Check if the folder doesn't exist and then create it
        if (!Directory.Exists(fullPath))
        {
            DirectoryInfo di = Directory.CreateDirectory(fullPath);
            CreatePath = string.Empty;
        }
        else
        {
            Console.WriteLine("That path already exists.");
        }
    }

}
