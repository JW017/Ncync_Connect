@page "/Employee/{emp:int}/MyMoment"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using static System.Net.WebRequestMethods
@using NCL.Shared.Entities;

@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider IdentityValidationProvider

@attribute [StreamRendering]
@attribute [Authorize]


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="css/style-home.css" />
    <link rel="stylesheet" href="css/employeeLayout.css" />
    <link rel="stylesheet" href="css/FilterDropDown.css" />
    <title>NCL My Moment</title>


    <style>
        .event-text-box {
            position: absolute;
            margin: auto 10% auto 0;
            left: 10vw;
            width: 50vw;
            display: flex;
            flex-direction: column;
            align-items: normal;
            text-align: left;
            gap: 0px;
            background-color: rgba(255, 255, 255, 0.1);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
        }

        .text-first{
            position: relative;
            font-family: "Sansita", sans-serif;            
            font-style: normal;
            font-weight: 700;
            font-size: 30px;
            line-height: 0.9;
            color: #FFFFFF;
            margin: 20px 0px 5px 0px;
        }

        .text-second {
            position: relative;
            font-family: "Forum", serif;
            font-style: normal;
            font-weight: 400;
            font-size: 100px;
            line-height: 0.9;
            color: #FFFFFF;
            margin: 25px 0px 25px 0px;
        }

        .text-third {
            position: relative;
            font-family: "Sansita", sans-serif;
            font-style: normal;
            font-weight: 400;
            font-size: 24px;
            line-height: 0.9;
            color: #FFFFFF;
            margin: 5px 0px 20px 0px;
        }

        .text-video {
            position: relative;
            font-family: "Inter", sans-serif;
            font-style: normal;
            font-weight: 800;
            font-size: 130px;
            line-height: 0.9;
            color: #009CA5;
        }

        .text-image{
            position: relative;
            font-family: "Inter", sans-serif;
            font-style: normal;
            line-height: 1;
            color: white;
            white-space: nowrap;
        }

        .text-image.line1 {
            font-size: 48px;
            font-weight: 800;
        }

            .text-image.line2 {
                font-weight: 400;
                font-size: 30px;
            }

        .emp-sidenav {
            height: 100%;
            width: 0;
            position: fixed;
            z-index: 111;
            top: 0;
            right: 0;
            background-color: #111;
            overflow-x: hidden;
            transition: 0.5s;
            padding-top: 60px;
        }

            .emp-sidenav a {
                padding: 8px 8px 8px 32px;
                text-decoration: none;
                font-size: 25px;
                color: #818181;
                display: block;
                transition: 0.3s;
            }

                .emp-sidenav a:hover {
                    color: #f1f1f1;
                }

            .emp-sidenav .emp-closebtn {
                position: absolute;
                top: 0;
                right: 25px;
                font-size: 24px;
                margin-left: 50px;
            }

        .mask1 {
            -webkit-mask-image: url(Asset/EmployeeAsset/EventPage/Frame1.png);
            mask-image: url(Asset/EmployeeAsset/EventPage/Frame1.png);
            -webkit-mask-repeat: no-repeat;
            mask-repeat: no-repeat;
        }


    </style>
</head>
<ConfirmDialog @ref="MyMomentdialog" />
<body>

    <img id="emp-home-gif" src="/Asset/EmployeeAsset/MomentPage/my-moment-gif.gif" alt="eventThumbnail">
    
    <div class="home__nav">
        <nav>
            <div class="nav__logo"><img src="/Asset/NamCheongLogo.png" alt="NCL Logo"></div>
            <ul class="nav__links">
                <li class="link">
                    <div class="dropdown">
                        <button class="nav__btn">
                            =
                        </button>
                        <div class="dropdown-content">
                            <a href="" @onclick="@(()=>GoTo("Home"))" style="text-align: left;">Home</a>
                            <a href="" @onclick="@(()=>GoTo("Moment"))" style="text-align: left;">Joyous Moment</a>
                            <a href="" @onclick="@(()=>GoTo("MyMoment"))" style="text-align: left;">My Moment</a>
                            <a href="" @onclick="@(()=>BeginLogOut())" style="text-align: left;">Logout</a>
                        </div>
                    </div>
                </li>
            </ul>
        </nav>
    </div>

    <section>
        <div class="event-text-box">
                    <div class="text-first">PRECIOUS MEMORIES MARKER</div>
                    <div class="text-second">My Moments</div>
                    <div class="text-third">Whether it’s a personal achievement, a special family event, a fun hobby, or a professional milestone, we want to celebrate these moments together.</div>
        </div>
        <img class="white-polygon" src="Asset/EmployeeAsset/white-polygon.png">
    </section>

     
    <div class="main">
        <h1 style="text-align:center;">My Moments</h1>

        <!-- filter Grid -->
        <div class="filter-center">
            <input id="filter-box" type="text" placeholder="Search..." onkeyup="filterFunction('filter-box', 'filter-myDropdown-mymoment', 'button')">
        </div>
        <hr>


        @if (momentgroup.Any())
        {
@*             <p style="text-align:center;">All</p> *@

            <!-- Moment Grid -->
            <Accordion Flush="true" id="filter-myDropdown-mymoment">
                @foreach (var m in momentgroup)
                {
                    <AccordionItem>
                        <TitleTemplate>
                            @m.Moment__DateTime &emsp; @m.Moment__Title
                        </TitleTemplate>
                        <Content>
                            <div class="row" >

                                <div class="column-moment showit">
                                    <div class="radius">
                                            <img class="radius" src="@m.Moment__FilePath">
                                    </div>
                                </div>

                                <div class="column-moment showit">
                                    <div class="radius">

                                            @foreach (var e in employeesList.Where(i => i.Employee__ID == m.EmployeeEmployee__ID))
                                            {
                                                <div class="top">
                                                    <div class="userDeatils">
                                                        <h3>@e.Employee__Name<br><span>@m.Moment__DateTime</span></h3>
                                                    </div>
                                                </div>
                                            }

                                        <div class="top">
                                            <div class="userDeatils">
                                                @if (@m.Moment__Status == "Pending")
                                                {
                                                    <h4>
                                                        <Badge Color="BadgeColor.Warning">@m.Moment__Status</Badge>
                                                        <br><span>Waiting for Admin Approval</span>
                                                    </h4>
                                                    <br />
                                                }
                                                else if (@m.Moment__Status == "Expired")
                                                {
                                                    <h4><Badge Color="BadgeColor.Secondary">@m.Moment__Status</Badge></h4>
                                                    <br />
                                                    
                                                }
                                                else if (@m.Moment__Status == "Approved")
                                                {
                                                    <h4>
                                                        <Badge Color="BadgeColor.Success">@m.Moment__Status</Badge>
                                                        <br><span>Expired on @m.Moment__DateTime.AddDays(7)</span>
                                                        <br />
                                                    </h4>
                                                    
                                                }
                                                else if (@m.Moment__Status == "Rejected")
                                                {
                                                    <h4><Badge Color="BadgeColor.Danger">@m.Moment__Status</Badge></h4>
                                                    <br />
                                                }
                                                
                                            </div>
                                        </div>

                                        <div class="title">
                                            <h3>@m.Moment__Title</h3>                                       
                                        </div>

                                            @if (m.Moment__Description != null)
                                            {
                                                <div class="showContent">@m.Moment__Description</div>
                                            }

                                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
                                            <Button @ref="deleteButton" Color="ButtonColor.Danger" @onclick="@(()=>ShowDeleteMomentDialogAsync(m.Moment__ID))">Delete</Button>
                                        </div>
                                        

                                    </div>
                                </div>
                            </div>
                        </Content>
                    </AccordionItem>
                }

            </Accordion>

            <div style="margin-top: 100px;">
                <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
                    <Button @ref="addButton" Color="ButtonColor.Primary" @onclick="@(()=>OnShowAddModalClick())">Share Moment</Button>
                </div>
            </div>
        }
        else
        {
            <div >
                <p class="title">No Moment Shared</p>
                <Button @ref="addButton" Color="ButtonColor.Primary" @onclick="@(()=>OnShowAddModalClick())">Share Moment</Button>
            </div>

        }
    </div>

    <!-- FOOTER -->
    <section id="footer-emp">
        <div class="footer-emp">
            <img id="emp-home-footer-gif" src="Asset/EmployeeAsset/MomentPage/my-moment-gif.gif" alt="eventFooterThumbnail">
            <img class="footer-logo" src="Asset/EmployeeAsset/white-logo.png">
            <div class="line"></div>
            <div class="text-copyright">© 2024 Nam Cheong Dockyard Sdn Bhd. All Rights Reserved.</div>
        </div>
    </section>

    <!-- The Add Moment Modal -->
    <Modal @ref="modalAdd" title="Add New Modal" Size="ModalSize.Large" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
        <BodyTemplate>
            <EditForm Model="moment">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="content">

                    <div class="form-group row mb-3">
                        <div>
                            <label for="MomentTitle">Moment Title:</label>
                            <InputText @bind-Value="moment.Moment__Title" />
                            <ValidationMessage For="@(() => moment.Moment__Title)" />
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <div>
                            <label for="MomentDesc">Moment Description:</label>
                            <InputTextArea @bind-Value="moment.Moment__Description" style="width:80%; height:140px;" />
                            <ValidationMessage For="@(() => moment.Moment__Description)" />
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <div>
                            <div>Select file:</div>
                            <InputFile @key=@(inputFileId) OnChange="MultiFileSubmit" accept=".mp4, .jpeg, .png, .gif, .jpg"></InputFile>
                            <ValidationMessage For="@(() => moment.Moment__FilePath)" />
                        </div>
                    </div>

                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" id="resetEventFile" @onclick="@(()=>OnHideAddModalClick(moment.Moment__ID))">Cancel</Button>
            <Button @ref="addButton" Color="ButtonColor.Primary" @onclick="@(()=>MomentSubmit(moment.Moment__ID))">Add</Button>
        </FooterTemplate>
    </Modal>

</body>
</html>

<script src="js/filterDropDown.js"></script>

<script>
    window.removeBackdropClass = function () {
        let backdrop = document.querySelector('.modal-backdrop.fade.show');
        if (backdrop) {
            backdrop.classList = ('.modal-backdrop.fade');
        }
    };

    function ShowResetButton() {
        document.getElementById("resetEventFile").disabled = false;
    }

    function DisableResetButton() {
        document.getElementById("resetEventFile").disabled = true;
    }


</script>


@code {
    private bool UserAuthenticated => Authenticationstate.User.Identity?.IsAuthenticated ?? false;
    private string UserName => Authenticationstate.User.Identity?.Name ?? "Unknown";
    private AuthenticationState Authenticationstate { get; set; }

    [Parameter] public int EID { get; set; }
    [Parameter] public int emp { get; set; }

    List<Employee> employeesList = new List<Employee>();
    public Employee employees { get; set; } = new Employee();
    public string? Username { get; set; }

    private HashSet<Moment> momentgroup = new();
    List<Moment> moments = new List<Moment>();
    public Moment moment { get; set; } = new Moment();

    private Button deleteButton, addButton;
    private ConfirmDialog MyMomentdialog = default!;
    private Guid inputFileId = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        Authenticationstate = await IdentityValidationProvider.GetAuthenticationStateAsync();
        var user = Authenticationstate.User;
        Username = UserName;

        // Fetch the class from the SQL database
        await LoadMoment();
        await LoadEmployee();

        @foreach (var m in moments)
        {
            if (m.EmployeeEmployee__ID == emp)
            {
                momentgroup.Add(m);
            }
        }
    }

    async Task LoadMoment()
    {
        var result = await Http.GetFromJsonAsync<List<Moment>>("https://localhost:7219/api/Moments/GetMoment");
        if (result != null)
        {
            moments = result;
        }
    }

    async Task LoadEmployee()
    {
        var result = await Http.GetFromJsonAsync<List<Employee>>("https://localhost:7219/api/Employees/GetEmployees");
        if (result != null)
        {
            employeesList = result;
        }
    }

    private Modal modalApproval, modalAdd;

    private async Task OnShowApprovalModalClick(int MID)
    {
        var selectedItem = moments.First(c => c.Moment__ID == MID);

        //display the item's detailed information
        moment.Moment__Title = selectedItem.Moment__Title;
        moment.EmployeeEmployee__ID = selectedItem.EmployeeEmployee__ID;
        moment.Moment__DateTime = selectedItem.Moment__DateTime;
        moment.Moment__Description = selectedItem.Moment__Description;
        moment.Moment__SequenceNo = selectedItem.Moment__SequenceNo;
        moment.Moment__FilePath = selectedItem.Moment__FilePath;
        moment.Moment__FileType = selectedItem.Moment__FileType;
        moment.Moment__Status = selectedItem.Moment__Status;
        moment.Moment__ID = selectedItem.Moment__ID;

        await modalApproval.ShowAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    private void CreateMomentFolder()
    {
        string path = "wwwroot\\Moment\\Moment_Emp_" + emp;

        // Combine the base path with the new folder path
        string fullPath = Path.Combine(Environment.CurrentDirectory, path);

        // Check if the folder doesn't exist and then create it
        if (!Directory.Exists(fullPath))
        {
            DirectoryInfo di = Directory.CreateDirectory(fullPath);
        }
        else
        {
            Console.WriteLine($"This path: {path} already exists.");
        }
    }

    private async Task OnShowAddModalClick()
    {
        await modalAdd.ShowAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    private async Task OnHideAddModalClick(int id)
    {
        var selectedItem = moments.First(c => c.Moment__ID == id);

        if (selectedItem.Moment__FilePath != null)
        {
            ResetInputFile();
        }
        await modalAdd.HideAsync();
        await JSRuntime.InvokeVoidAsync("removeBackdropClass");
    }

    private void ResetInputFile()
    {
        var targetDeleteMomentPath = "wwwroot/" + moment.Moment__FilePath;
        if (System.IO.File.Exists(targetDeleteMomentPath))
        {
            System.IO.File.Delete(targetDeleteMomentPath);
        }

        // Change id so that blazor re-renders InputFile as new component
        inputFileId = Guid.NewGuid();
        moment = new();
    }
    private string ErrorMsg { get; set; } = String.Empty;
    const long maxFileSize = 5000 * 1024 * 100; // 500MB
    private string FileName { get; set; } = String.Empty;
    private string FileType { get; set; } = String.Empty;

    public async Task MultiFileSubmit(InputFileChangeEventArgs e)
    {
        var index = 0;
        var browserFiles = e.GetMultipleFiles();

        CreateMomentFolder();

        foreach (var f in browserFiles)
        {
            if (f != null)
            {
                FileName = f.Name;
                moment.Moment__Status = "Pending";
                moment.EmployeeEmployee__ID = emp;

                try
                {
                    var fileStream = f.OpenReadStream(maxFileSize);
                    var shortenFile = "Moment/Moment_Emp_" + moment.EmployeeEmployee__ID + "/" + f.Name;
                    var randomFile = Path.Combine("wwwroot", shortenFile);
                    var extension = Path.GetExtension(f.Name);
                    var shortenFilePath = Path.ChangeExtension(shortenFile, extension);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);

                    var targetStream = new FileStream(targetFilePath, FileMode.Create);
                    await fileStream.CopyToAsync(targetStream);
                    targetStream.Close();

                    index += 1;

                    if (extension == ".png" || extension == ".jpg" || extension == ".jpg" || extension == ".gif")
                    {
                        FileType = "Image";
                        moment.Moment__FilePath = shortenFilePath;
                    }
                    else if (extension == ".mp4")
                    {
                        FileType = "Video";
                        moment.Moment__FilePath = shortenFilePath;
                    }

                    moment.Moment__FileType = FileType;
                    moment.Moment__SequenceNo = index;


                    await JSRuntime.InvokeVoidAsync("ShowResetButton");

                    var result = await Http.PostAsJsonAsync("https://localhost:7219/api/Moments/AddMoments", moment);
                    moment.Moment__ID = moment.Moment__ID;

                }
                catch (Exception exception)
                {
                    ErrorMsg = exception.Message;
                }
            }
        }
    }

    //Create a new Moment
    async Task MomentSubmit(int id)
    {
        try
        {
            // Post the page name to the server using PostAsJsonAsync
            var result = await Http.PutAsJsonAsync($"https://localhost:7219/api/Moments/UpdateMomentByID/{id}", moment);

            // Ensure the request was successful
            if (result.IsSuccessStatusCode)
            {
                Console.WriteLine("Added New Moment");
                await LoadMoment();
                await InvokeAsync(() => { StateHasChanged(); });
            };
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    // private async Task SubmitAsync(int id, bool status)
    // {
    //     var selectedMoment = moments.First(c => c.Moment__ID == id);


    //     if (status == true)
    //     {
    //         moment.Moment__Status = "Pending";
    //         moment.Moment__DateTime = DateTime.Now;

    //         await Http.PutAsJsonAsync($"https://localhost:7219/api/Moments/UpdateMomentByID/{id}", moment);
    //         approveButton?.ShowLoading("Approving...");
    //         await Task.Delay(1500);
    //         await LoadMoment();

    //         await modalApproval.HideAsync();
    //         Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Moment", true);
    //     }
    //     else
    //     {
    //         moment.Moment__Status = "Rejected";

    //         await Http.PutAsJsonAsync($"https://localhost:7219/api/Moments/UpdateMomentByID/{id}", moment);
    //         rejectButton?.ShowLoading("Rejecting...");
    //         await Task.Delay(1500);
    //         await LoadMoment();

    //         await modalApproval.HideAsync();
    //         Navigation.NavigateTo("https://localhost:7219/AdministratorPage/" + admin + "/Moment", true);
    //     }
    // }

    private async Task ShowDeleteMomentDialogAsync(int id)
    {
        var selectedMoment = moments.First(c => c.Moment__ID == id);

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await MyMomentdialog.ShowAsync(
            title: "Delete Moment",
            message1: $"Are you sure you want to delete this moment - {selectedMoment.Moment__Title}?",

            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteMomentByID(selectedMoment.Moment__ID);
        }
    }

    async Task DeleteMomentByID(int id)
    {
        var selectedMoment = moments.First(c => c.Moment__ID == id);

        var targetDeleteMomentPath = "wwwroot/" + selectedMoment.Moment__FilePath;
        if (System.IO.Directory.Exists(targetDeleteMomentPath))
        {
            System.IO.Directory.Delete(targetDeleteMomentPath, true);

            await Http.DeleteAsync("https://localhost:7219/api/Moments/" + id);
        }
        else
        {
            await Http.DeleteAsync("https://localhost:7219/api/Moments/" + id);
            Console.WriteLine($"Fail to delete {selectedMoment.Moment__FilePath} moment");
        }

        await LoadMoment();

    }

    // private bool isEmpty = true;

    // public void GoToResult(int EID)
    // {
    //     if (moments.Where(i => i.EmployeeEmployee__ID == EID).Any())
    //     {
    //         isEmpty = false;
    //     }
    //     else
    //     {
    //         isEmpty = true;
    //     }
    //     Navigation.Refresh(false);
    // }

    public void BeginLogOut()
    {
        Navigation.NavigateToLogout("/MicrosoftIdentity/Account/SignOut", "/");
    }

    public void GoToPage()
    {
        Navigation.NavigateTo("/Employee/" + emp + "/Page");
    }

    public void GoTo(string page)
    {
        Navigation.NavigateTo("/Employee/" + emp + "/" + page);
    }
}





